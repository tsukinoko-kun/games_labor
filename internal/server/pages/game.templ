package pages

import (
	"fmt"
	"gameslabor/internal/games"
	"gameslabor/internal/server/context"
	"gameslabor/internal/server/islands"
	"gameslabor/internal/server/public"
)

type (
	gameIslandProps struct {
		Scenarios []gameIslandPropsScenario `json:"scenarios"`
	}
	gameIslandPropsScenario struct {
		Title string `json:"title"`
		Id    string `json:"id"`
		Image string `json:"image"`
	}
)

templ game() {
	@layout("Games Labor") {
		if g, ok := games.Games[ctx.Value("id").(string)]; ok {
			{{ g.AddPlayer(ctx.Value(context.UserID).(string)) }}
			@islands.Island("Game", gameIslandProps{
				Scenarios: []gameIslandPropsScenario{
					{Title: "Sci-Fi", Id: "scifi", Image: public.Path("scifi.webp")},
					{Title: "Schatzsucher", Id: "treasure_hunt", Image: public.Path("treasure_hunt.webp")},
					{Title: "Piraten", Id: "pirates", Image: public.Path("pirates.webp")},
					{Title: "Fantasy", Id: "fantasy", Image: public.Path("fantasy.webp")},
					{Title: "Vikinger", Id: "vikings", Image: public.Path("vikings.webp")},
					{Title: "Western", Id: "western", Image: public.Path("western.webp")},
					{Title: "Post-Apokalypse", Id: "post-apocalyptic", Image: public.Path("post-apocalyptic.webp")},
				},
			})
		} else {
			<p class="text-lg font-semibold">{ fmt.Sprintf("Game %q not found", ctx.Value(context.UserID).(string)) }</p>
		}
		<script src={ public.Path("js/islands.js") } integrity={ public.Integrity("js/islands.js") }></script>
	}
}

func init() {
	pageRegister["/game"] = game
}
